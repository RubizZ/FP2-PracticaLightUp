 void eliminar(tListaPosiciones& lp, const tPosicion& pos) {
	int i = 0;
	while (i < lp.cont && !(lp.arrayPos[i] == pos)) {
		i++;
	}
	if (i != lp.cont) {
		for (int j = i; j < lp.cont - 1; j++) {
			lp.arrayPos[j] = lp.arrayPos[j + 1];
		}
		lp.cont--;
	}
}

void traeIzquierda(tListaPartidas& listaPartidas, const int i) {
	for (int j = i + 1; j < listaPartidas.nElem; j++) {
		listaPartidas.datos[j] = listaPartidas.datos[j + 1];
	}
	destruyePartida(*listaPartidas.datos[i]);
}

void mueveDerecha(tListaPartidas& listaPartidas, const int i) {
	for (int j = listaPartidas.nElem; j >= i; j--) {
		listaPartidas.datos[j + 1] = listaPartidas.datos[j];
	}
	destruyePartida(*listaPartidas.datos[i]);
}

//iluminarAlrededor SIN tDir QUE ILUMINA UNIFORMEMENTE EN CADA DIRECCION
bool terminarN = false, terminarE = false, terminarS = false, terminarO = false;
int i = 1;
while (!terminarN || !terminarE || !terminarS || !terminarO) {

	if (!terminarN && !esPared(tab.tablero[x][y - i]) && y - i >= 0) actualizaIluminaci贸nCelda(tab.tablero[x][y - i], iluminar);
	else terminarN = true;

	if (!terminarE && !esPared(tab.tablero[x + i][y]) && x + i < tab.nCols) actualizaIluminaci贸nCelda(tab.tablero[x + i][y], iluminar);
	else terminarE = true;
		
	if (!terminarS && !esPared(tab.tablero[x][y + i]) && y + i < tab.nFils) actualizaIluminaci贸nCelda(tab.tablero[x][y + i], iluminar); 
	else terminarS = true;

	if (!terminarO && !esPared(tab.tablero[x - i][y]) && x - i >= 0) actualizaIluminaci贸nCelda(tab.tablero[x - i][y], iluminar);
	else terminarO = true;

	i++;
}


//tDir++ CUANDO ES OESTE VUELVE AL NORTE
switch (dir) {
case NORTE:
	dir = ESTE;
	break;
case ESTE:
	dir = SUR;
	break;
case SUR:
	dir = OESTE;
	break;
case OESTE:
	dir = NORTE;
	break;
}


//iluminarAlrededor CON CUATRO WHILES
do {
	int i = 1;
	switch (dir) {
	case NORTE:
		while (x - i >= 0 && !esPared(tab.tablero[x - i][y])) {
			actualizaIluminacionCelda(tab.tablero[x - i][y], iluminar);
			i++;
		}
		break;
	case ESTE:
		while (y + i < tab.nFils && !esPared(tab.tablero[x][y + i])) {
			actualizaIluminacionCelda(tab.tablero[x][y + i], iluminar);
			i++;
		}
		break;
	case SUR:
		while (x + i < tab.nCols && !esPared(tab.tablero[x + i][y])) {
			actualizaIluminacionCelda(tab.tablero[x + i][y], iluminar);
			i++;
		}
		break;
	case OESTE:
		while (y - i >= 0 && !esPared(tab.tablero[x][y - i])) {
			actualizaIluminacionCelda(tab.tablero[x][y - i], iluminar);
			i++;
		}
		break;
	}
	dir++;
} while (dir != NORTE);
  
//comprobarParedRestringida CON 4 IFS Y SIN TENER EN CUENTA PROGRAMACION MODULAR
if (x - 1 >= 0 && esBombilla(tab.tablero[x - 1][y])) num++;
if (y + 1 < tab.nCols && esBombilla(tab.tablero[x][y + 1])) num++;
if (x + 1 < tab.nFils && esBombilla(tab.tablero[x + 1][y])) num++;
if (y - 1 >= 0 && esBombilla(tab.tablero[x][y - 1])) num++;

